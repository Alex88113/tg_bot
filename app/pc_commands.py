import asyncio
from telegram import Update
from telegram.ext import ContextTypes
import platform
import psutil

from abc import ABC, abstractmethod
from datetime import datetime

class PcCommands(ABC):
    @abstractmethod
    async def test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        pass
    @abstractmethod
    async def system_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        pass
    @abstractmethod
    async def processor_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        pass
    @abstractmethod
    async def disk(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        pass
    @abstractmethod
    async def access_memory(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        pass

class PcCommandsBot(PcCommands):
    async def test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /test –≤—ã–∑–≤–∞–Ω–∞")
        await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /test –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

    async def system_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        system = platform.system()
        architecture = platform.architecture()
        await update.message.reply_text(f"–í–∞—à–∞ –û–°: {system}\n–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–∞—à–µ–≥–æ –ø–∫: {architecture}")

    async def processor_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
         model_processor = platform.processor()
         machine_processor = platform.machine()
         await update.message.reply_text('-' * 80)
         await update.message.reply_text(f"–ú–æ–¥–µ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤–∞—à–µ–≥–æ –ø–∫: {model_processor}\n–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {machine_processor}")
         await update.message.reply_text(f'–ö–æ–ª –≤–æ —è–¥–µ—Ä: {psutil.cpu_count()}')
         await update.message.reply_text(f'–ö–æ–ª –≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {psutil.cpu_count(logical=False)}')
         cpu_freq = psutil.cpu_freq()
         await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {cpu_freq.current} MHz")
         await update.message.reply_text(f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {cpu_freq.min}')
         await update.message.reply_text(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {cpu_freq.max}')
         await update.message.reply_text('-' * 80)

    async def disk(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
<<<<<<< HEAD
        info_about_disk = psutil.disk_partitions()
        for data_disk in info_about_disk:
            used = psutil.disk_usage('/')
            all_data_disk = f"""
–î–∏—Å–∫: {data_disk.device}
–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {data_disk.mountpoint}
–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {data_disk.fstype}
–û–±—â–∏–π –æ–±—ä—ë–º –¥–∏—Å–∫–∞ {data_disk.device}: {used.total / (1024 ** 3):.2f}"""
            await update.message.reply_text(all_data_disk)
    
=======
    partitions = psutil.disk_partitions(all=False)
    info_disk = 'üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:\n\n'
    for partition in partitions:
        try:
            usage = psutil.disk_usage(partition.mountpoint)
            info_disk = f"""üìÅ –†–∞–∑–¥–µ–ª –¥–∏—Å–∫–∞: {partition.mountpoint}
–¢–∏–ø —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {partition.fstype}
–í—Å–µ–≥–æ: {usage.total // (1024 ** 3)} GB
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {usage.used // (1024 ** 3)} GB ({usage.percent}%)
–°–≤–æ–±–æ–¥–Ω–æ: {usage.free // (1024 ** 3)} GB\n\n"""
        except Exception as error:
           return  f"‚ùå –û—à–∏–±–∫–∞: {error}\n\n"
    await update.message.reply_text(info_disk)

    async def users_system(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        users = psutil.users()
        for user in users:
            await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã: {user}")

>>>>>>> e9c34ca5d487314cce7b6e90d96a92012cde2415
    async def access_memory(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        virtual_memory = psutil.virtual_memory()
        used_memory = (virtual_memory.used / virtual_memory.total) * 100
        all_data_memory = f"""
–û–±—â–∏–π –æ–±—ä—ë–º –û–ó–£: {virtual_memory.total / (1024 ** 3):.2f}GB
–°–≤–æ–±–æ–¥–Ω–æ: {virtual_memory.available / (1024 ** 3):.2f}GB
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {used_memory:.2f}%"""
        await update.message.reply_text(all_data_memory)
